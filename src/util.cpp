#include "util.h"

namespace {

	std::string generate_nonce() {
		std::ostringstream ss;
		uint32_t entropy = esp_random();
		// Random numbers generated by esp_random are probably sufficient.
		// But just to be safe let's append the current time in microseconds as well.
		auto extraEntropyFromTime = std::ceil((std::chrono::steady_clock::now().time_since_epoch().count() / 1000) % (UINT32_MAX / 10));
		entropy += extraEntropyFromTime;
		ss << entropy;
		return ss.str();
	}
}

namespace util {

	std::string createSignedLnurlWithdraw(const double &t_amount) {
		Lnurl::Signer signer(config::getLnurlSignerConfig());
		std::string nonce = generate_nonce();
		Lnurl::WithdrawParams params;
		std::string amount = floatToStringWithPrecision(t_amount, config::getUnsignedShort("fiatPrecision"));
		params.minWithdrawable = amount;
		params.maxWithdrawable = amount;
		params.defaultDescription = "";
		params.custom["f"] = config::getString("fiatCurrency");
		return signer.create_url(params, nonce);
	}

	std::string lnurlEncode(const std::string &text) {
		return Lnurl::encode(text);
	}

	std::string toUpperCase(std::string s) {
		std::transform(s.begin(), s.end(), s.begin(), [](unsigned char c){ return std::toupper(c); });
		return s;
	}

	std::vector<float> stringListToFloatVector(const std::string &stringList, const char &delimiter) {
		std::vector<float> floatVector;
		if (stringList != "") {
			std::istringstream ss(stringList);
			std::string value;
			while (std::getline(ss, value, delimiter)) {
				floatVector.push_back(std::atof(value.c_str()));
			}
		}
		return floatVector;
	}

	std::string floatVectorToStringList(const std::vector<float> floatVector, const char &delimiter) {
		std::ostringstream ss;
		for (int index = 0; index < floatVector.size(); index++) {
			ss << floatVector[index] << delimiter;
		}
		std::string stringList = ss.str();
		if (stringList != "") {
			stringList.pop_back();// Remove the last instance of delimiter.
		}
		return stringList;
	}

	std::string urlEncode(const std::string &value) {
		std::ostringstream escaped;
		escaped.fill('0');
		escaped << std::hex;
		for (std::string::const_iterator i = value.begin(), n = value.end(); i != n; ++i) {
			std::string::value_type c = (*i);
			// Keep alphanumeric and other accepted characters intact
			if (isalnum(c) || c == '-' || c == '_' || c == '.' || c == '~') {
				escaped << c;
				continue;
			}
			// Any other characters are percent-encoded
			escaped << std::uppercase;
			escaped << '%' << std::setw(2) << int((unsigned char) c);
			escaped << std::nouppercase;
		}
		return escaped.str();
	}

	std::string floatToStringWithPrecision(const float &value, const unsigned short &precision) {
		std::ostringstream out;
		out.precision(precision);
		out << std::fixed << value;
		return out.str();
	}

	float stringToFloat(const std::string& str) {
		return std::stof(str);
	}
}

